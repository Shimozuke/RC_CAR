
samochodzik_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e90  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004034  08004034  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800403c  0800403c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004040  08004040  00014040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08004050  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08004050  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cce4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa3  00000000  00000000  0002cd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002ecc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  0002f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d24  00000000  00000000  00030580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8af  00000000  00000000  000462a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008935a  00000000  00000000  00053b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcead  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d0  00000000  00000000  000dcf00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800400c 	.word	0x0800400c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800400c 	.word	0x0800400c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	4b53      	ldr	r3, [pc, #332]	; (8000640 <MX_GPIO_Init+0x168>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a52      	ldr	r2, [pc, #328]	; (8000640 <MX_GPIO_Init+0x168>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b50      	ldr	r3, [pc, #320]	; (8000640 <MX_GPIO_Init+0x168>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b4c      	ldr	r3, [pc, #304]	; (8000640 <MX_GPIO_Init+0x168>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a4b      	ldr	r2, [pc, #300]	; (8000640 <MX_GPIO_Init+0x168>)
 8000514:	f043 0302 	orr.w	r3, r3, #2
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b49      	ldr	r3, [pc, #292]	; (8000640 <MX_GPIO_Init+0x168>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4b45      	ldr	r3, [pc, #276]	; (8000640 <MX_GPIO_Init+0x168>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a44      	ldr	r2, [pc, #272]	; (8000640 <MX_GPIO_Init+0x168>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b42      	ldr	r3, [pc, #264]	; (8000640 <MX_GPIO_Init+0x168>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000548:	483e      	ldr	r0, [pc, #248]	; (8000644 <MX_GPIO_Init+0x16c>)
 800054a:	f001 fb4d 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|in2_Pin|in1_Pin|in4_Pin
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 519e 	mov.w	r1, #5056	; 0x13c0
 8000554:	483c      	ldr	r0, [pc, #240]	; (8000648 <MX_GPIO_Init+0x170>)
 8000556:	f001 fb47 	bl	8001be8 <HAL_GPIO_WritePin>
                          |in3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000560:	483a      	ldr	r0, [pc, #232]	; (800064c <MX_GPIO_Init+0x174>)
 8000562:	f001 fb41 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4619      	mov	r1, r3
 800057e:	4831      	ldr	r0, [pc, #196]	; (8000644 <MX_GPIO_Init+0x16c>)
 8000580:	f001 f996 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WallDet_Pin;
 8000584:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800058a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800058e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WallDet_GPIO_Port, &GPIO_InitStruct);
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	4619      	mov	r1, r3
 800059a:	482a      	ldr	r0, [pc, #168]	; (8000644 <MX_GPIO_Init+0x16c>)
 800059c:	f001 f988 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 80005a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4619      	mov	r1, r3
 80005b8:	4823      	ldr	r0, [pc, #140]	; (8000648 <MX_GPIO_Init+0x170>)
 80005ba:	f001 f979 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80005be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4619      	mov	r1, r3
 80005d4:	481d      	ldr	r0, [pc, #116]	; (800064c <MX_GPIO_Init+0x174>)
 80005d6:	f001 f96b 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CSN_Pin;
 80005da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_CSN_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	4816      	ldr	r0, [pc, #88]	; (800064c <MX_GPIO_Init+0x174>)
 80005f4:	f001 f95c 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = in2_Pin|in1_Pin|in4_Pin|in3_Pin;
 80005f8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80005fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	4619      	mov	r1, r3
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <MX_GPIO_Init+0x170>)
 8000612:	f001 f94d 	bl	80018b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2017      	movs	r0, #23
 800061c:	f001 f911 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000620:	2017      	movs	r0, #23
 8000622:	f001 f92a 	bl	800187a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	2028      	movs	r0, #40	; 0x28
 800062c:	f001 f909 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000630:	2028      	movs	r0, #40	; 0x28
 8000632:	f001 f922 	bl	800187a <HAL_NVIC_EnableIRQ>

}
 8000636:	bf00      	nop
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40020800 	.word	0x40020800
 8000648:	40020400 	.word	0x40020400
 800064c:	40020000 	.word	0x40020000

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 ffa8 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f816 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f7ff ff3c 	bl	80004d8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000660:	f000 fc76 	bl	8000f50 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000664:	f000 fd88 	bl	8001178 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000668:	f000 fdfc 	bl	8001264 <MX_TIM3_Init>
  MX_TIM5_Init();
 800066c:	f000 fe72 	bl	8001354 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim5);
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <main+0x34>)
 8000672:	f002 fd21 	bl	80030b8 <HAL_TIM_Base_Start_IT>

  nrf24l01p_rx_init(2500, _1Mbps);
 8000676:	2100      	movs	r1, #0
 8000678:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800067c:	f000 fa46 	bl	8000b0c <nrf24l01p_rx_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0x30>
 8000682:	bf00      	nop
 8000684:	20000118 	.word	0x20000118

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fcb0 	bl	8003ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <SystemClock_Config+0xb8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a22      	ldr	r2, [pc, #136]	; (8000740 <SystemClock_Config+0xb8>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b20      	ldr	r3, [pc, #128]	; (8000740 <SystemClock_Config+0xb8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <SystemClock_Config+0xbc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d4:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <SystemClock_Config+0xbc>)
 80006d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <SystemClock_Config+0xbc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2310      	movs	r3, #16
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fabf 	bl	8001c80 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000708:	f000 f976 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fd22 	bl	8002170 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000732:	f000 f961 	bl	80009f8 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000758:	d102      	bne.n	8000760 <HAL_GPIO_EXTI_Callback+0x18>
		nrf24l01p_rx_receive(rx_data); // read data when data ready flag is set
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <HAL_GPIO_EXTI_Callback+0x20>)
 800075c:	f000 fa04 	bl	8000b68 <nrf24l01p_rx_receive>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000028 	.word	0x20000028

0800076c <TuneEngine>:

void TuneEngine()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	if (rx_data[0] < 6 && lastComm != rx_data[0] && ! wallFlag)
 8000770:	4b7a      	ldr	r3, [pc, #488]	; (800095c <TuneEngine+0x1f0>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b05      	cmp	r3, #5
 8000776:	d82d      	bhi.n	80007d4 <TuneEngine+0x68>
 8000778:	4b78      	ldr	r3, [pc, #480]	; (800095c <TuneEngine+0x1f0>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b78      	ldr	r3, [pc, #480]	; (8000960 <TuneEngine+0x1f4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	429a      	cmp	r2, r3
 8000784:	d026      	beq.n	80007d4 <TuneEngine+0x68>
 8000786:	4b77      	ldr	r3, [pc, #476]	; (8000964 <TuneEngine+0x1f8>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d122      	bne.n	80007d4 <TuneEngine+0x68>
	{
		TIM2->CCR1 = 0;
 800078e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000792:	2200      	movs	r2, #0
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 0;
 8000796:	4b74      	ldr	r3, [pc, #464]	; (8000968 <TuneEngine+0x1fc>)
 8000798:	2200      	movs	r2, #0
 800079a:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOB, in1_Pin, SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	4872      	ldr	r0, [pc, #456]	; (800096c <TuneEngine+0x200>)
 80007a2:	f001 fa21 	bl	8001be8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, in2_Pin, RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2140      	movs	r1, #64	; 0x40
 80007aa:	4870      	ldr	r0, [pc, #448]	; (800096c <TuneEngine+0x200>)
 80007ac:	f001 fa1c 	bl	8001be8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, in3_Pin, SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b6:	486d      	ldr	r0, [pc, #436]	; (800096c <TuneEngine+0x200>)
 80007b8:	f001 fa16 	bl	8001be8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, in4_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c2:	486a      	ldr	r0, [pc, #424]	; (800096c <TuneEngine+0x200>)
 80007c4:	f001 fa10 	bl	8001be8 <HAL_GPIO_WritePin>

		lastComm = rx_data[0];
 80007c8:	4b64      	ldr	r3, [pc, #400]	; (800095c <TuneEngine+0x1f0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b64      	ldr	r3, [pc, #400]	; (8000960 <TuneEngine+0x1f4>)
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e037      	b.n	8000844 <TuneEngine+0xd8>
	}

	else if ((rx_data[0] > 5 && lastComm != rx_data[0]) || wallFlag)
 80007d4:	4b61      	ldr	r3, [pc, #388]	; (800095c <TuneEngine+0x1f0>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b05      	cmp	r3, #5
 80007da:	d906      	bls.n	80007ea <TuneEngine+0x7e>
 80007dc:	4b5f      	ldr	r3, [pc, #380]	; (800095c <TuneEngine+0x1f0>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b5f      	ldr	r3, [pc, #380]	; (8000960 <TuneEngine+0x1f4>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d103      	bne.n	80007f2 <TuneEngine+0x86>
 80007ea:	4b5e      	ldr	r3, [pc, #376]	; (8000964 <TuneEngine+0x1f8>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d028      	beq.n	8000844 <TuneEngine+0xd8>
	{
		TIM2->CCR1 = 0;
 80007f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007f6:	2200      	movs	r2, #0
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 0;
 80007fa:	4b5b      	ldr	r3, [pc, #364]	; (8000968 <TuneEngine+0x1fc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOB, in2_Pin, SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2140      	movs	r1, #64	; 0x40
 8000804:	4859      	ldr	r0, [pc, #356]	; (800096c <TuneEngine+0x200>)
 8000806:	f001 f9ef 	bl	8001be8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, in1_Pin, RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	4857      	ldr	r0, [pc, #348]	; (800096c <TuneEngine+0x200>)
 8000810:	f001 f9ea 	bl	8001be8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, in4_Pin, SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081a:	4854      	ldr	r0, [pc, #336]	; (800096c <TuneEngine+0x200>)
 800081c:	f001 f9e4 	bl	8001be8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, in3_Pin, RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000826:	4851      	ldr	r0, [pc, #324]	; (800096c <TuneEngine+0x200>)
 8000828:	f001 f9de 	bl	8001be8 <HAL_GPIO_WritePin>

		lastComm = rx_data[0];
 800082c:	4b4b      	ldr	r3, [pc, #300]	; (800095c <TuneEngine+0x1f0>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b4b      	ldr	r3, [pc, #300]	; (8000960 <TuneEngine+0x1f4>)
 8000834:	601a      	str	r2, [r3, #0]
		if (wallFlag)
 8000836:	4b4b      	ldr	r3, [pc, #300]	; (8000964 <TuneEngine+0x1f8>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <TuneEngine+0xd8>
		{
			lastComm = 0;
 800083e:	4b48      	ldr	r3, [pc, #288]	; (8000960 <TuneEngine+0x1f4>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
		}
	}

	if (rx_data[0] == 0 && ! wallFlag)
 8000844:	4b45      	ldr	r3, [pc, #276]	; (800095c <TuneEngine+0x1f0>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10b      	bne.n	8000864 <TuneEngine+0xf8>
 800084c:	4b45      	ldr	r3, [pc, #276]	; (8000964 <TuneEngine+0x1f8>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d107      	bne.n	8000864 <TuneEngine+0xf8>
	{
		TIM2->CCR1 = 0;
 8000854:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000858:	2200      	movs	r2, #0
 800085a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 0;
 800085c:	4b42      	ldr	r3, [pc, #264]	; (8000968 <TuneEngine+0x1fc>)
 800085e:	2200      	movs	r2, #0
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
 8000862:	e070      	b.n	8000946 <TuneEngine+0x1da>
	}
	else if (rx_data[0] == 1 || wallFlag)
 8000864:	4b3d      	ldr	r3, [pc, #244]	; (800095c <TuneEngine+0x1f0>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d003      	beq.n	8000874 <TuneEngine+0x108>
 800086c:	4b3d      	ldr	r3, [pc, #244]	; (8000964 <TuneEngine+0x1f8>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d009      	beq.n	8000888 <TuneEngine+0x11c>
	{
		TIM2->CCR1 = 1000;
 8000874:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 1000;
 800087e:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <TuneEngine+0x1fc>)
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
 8000886:	e05e      	b.n	8000946 <TuneEngine+0x1da>
	}
	else if (rx_data[0] == 2)
 8000888:	4b34      	ldr	r3, [pc, #208]	; (800095c <TuneEngine+0x1f0>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d108      	bne.n	80008a2 <TuneEngine+0x136>
	{
		TIM2->CCR1 = 1000;
 8000890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 0;
 800089a:	4b33      	ldr	r3, [pc, #204]	; (8000968 <TuneEngine+0x1fc>)
 800089c:	2200      	movs	r2, #0
 800089e:	635a      	str	r2, [r3, #52]	; 0x34
 80008a0:	e051      	b.n	8000946 <TuneEngine+0x1da>
	}
	else if (rx_data[0] == 3)
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <TuneEngine+0x1f0>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d109      	bne.n	80008be <TuneEngine+0x152>
	{
		TIM2->CCR1 = 1000;
 80008aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 750;
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <TuneEngine+0x1fc>)
 80008b6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80008ba:	635a      	str	r2, [r3, #52]	; 0x34
 80008bc:	e043      	b.n	8000946 <TuneEngine+0x1da>
	}
	else if (rx_data[0] == 4)
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <TuneEngine+0x1f0>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d108      	bne.n	80008d8 <TuneEngine+0x16c>
	{
		TIM2->CCR1 = 0;
 80008c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ca:	2200      	movs	r2, #0
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 1000;
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <TuneEngine+0x1fc>)
 80008d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d4:	635a      	str	r2, [r3, #52]	; 0x34
 80008d6:	e036      	b.n	8000946 <TuneEngine+0x1da>
	}
	else if (rx_data[0] == 5)
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <TuneEngine+0x1f0>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b05      	cmp	r3, #5
 80008de:	d109      	bne.n	80008f4 <TuneEngine+0x188>
	{
		TIM2->CCR1 = 750;
 80008e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 1000;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <TuneEngine+0x1fc>)
 80008ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f0:	635a      	str	r2, [r3, #52]	; 0x34
 80008f2:	e028      	b.n	8000946 <TuneEngine+0x1da>
	}
	else if (rx_data[0] == 6)
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <TuneEngine+0x1f0>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b06      	cmp	r3, #6
 80008fa:	d109      	bne.n	8000910 <TuneEngine+0x1a4>
	{
		TIM2->CCR1 = 1000;
 80008fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 1000;
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <TuneEngine+0x1fc>)
 8000908:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
 800090e:	e01a      	b.n	8000946 <TuneEngine+0x1da>
	}
	else if (rx_data[0] == 7)
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <TuneEngine+0x1f0>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b07      	cmp	r3, #7
 8000916:	d109      	bne.n	800092c <TuneEngine+0x1c0>
	{
		TIM2->CCR1 = 1000;
 8000918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800091c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 750;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <TuneEngine+0x1fc>)
 8000924:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
 800092a:	e00c      	b.n	8000946 <TuneEngine+0x1da>
	}
	else if (rx_data[0] == 8)
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <TuneEngine+0x1f0>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b08      	cmp	r3, #8
 8000932:	d108      	bne.n	8000946 <TuneEngine+0x1da>
	{
		TIM2->CCR1 = 750;
 8000934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000938:	f240 22ee 	movw	r2, #750	; 0x2ee
 800093c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 1000;
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <TuneEngine+0x1fc>)
 8000940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
	}

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000946:	2100      	movs	r1, #0
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <TuneEngine+0x204>)
 800094a:	f002 fc71 	bl	8003230 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <TuneEngine+0x208>)
 8000952:	f002 fc6d 	bl	8003230 <HAL_TIM_PWM_Start>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000028 	.word	0x20000028
 8000960:	2000002c 	.word	0x2000002c
 8000964:	20000029 	.word	0x20000029
 8000968:	40000400 	.word	0x40000400
 800096c:	40020400 	.word	0x40020400
 8000970:	20000088 	.word	0x20000088
 8000974:	200000d0 	.word	0x200000d0

08000978 <StepBack>:

void StepBack()
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	lastComm = 0;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <StepBack+0x6c>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]

	TIM2->CCR1 = 0;
 8000982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000986:	2200      	movs	r2, #0
 8000988:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR1 = 0;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <StepBack+0x70>)
 800098c:	2200      	movs	r2, #0
 800098e:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_GPIO_WritePin(GPIOB, in2_Pin, SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2140      	movs	r1, #64	; 0x40
 8000994:	4815      	ldr	r0, [pc, #84]	; (80009ec <StepBack+0x74>)
 8000996:	f001 f927 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, in1_Pin, RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	4813      	ldr	r0, [pc, #76]	; (80009ec <StepBack+0x74>)
 80009a0:	f001 f922 	bl	8001be8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, in4_Pin, SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009aa:	4810      	ldr	r0, [pc, #64]	; (80009ec <StepBack+0x74>)
 80009ac:	f001 f91c 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, in3_Pin, RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b6:	480d      	ldr	r0, [pc, #52]	; (80009ec <StepBack+0x74>)
 80009b8:	f001 f916 	bl	8001be8 <HAL_GPIO_WritePin>

	TIM2->CCR1 = 1000;
 80009bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009c4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR1 = 1000;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <StepBack+0x70>)
 80009c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009ce:	2100      	movs	r1, #0
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <StepBack+0x78>)
 80009d2:	f002 fc2d 	bl	8003230 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009d6:	2100      	movs	r1, #0
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <StepBack+0x7c>)
 80009da:	f002 fc29 	bl	8003230 <HAL_TIM_PWM_Start>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000002c 	.word	0x2000002c
 80009e8:	40000400 	.word	0x40000400
 80009ec:	40020400 	.word	0x40020400
 80009f0:	20000088 	.word	0x20000088
 80009f4:	200000d0 	.word	0x200000d0

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0e:	4802      	ldr	r0, [pc, #8]	; (8000a18 <cs_high+0x14>)
 8000a10:	f001 f8ea 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40020000 	.word	0x40020000

08000a1c <cs_low>:

static void cs_low()
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a26:	4802      	ldr	r0, [pc, #8]	; (8000a30 <cs_low+0x14>)
 8000a28:	f001 f8de 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40020000 	.word	0x40020000

08000a34 <ce_high>:

static void ce_high()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3e:	4802      	ldr	r0, [pc, #8]	; (8000a48 <ce_high+0x14>)
 8000a40:	f001 f8d2 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40020400 	.word	0x40020400

08000a4c <ce_low>:

static void ce_low()
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a56:	4802      	ldr	r0, [pc, #8]	; (8000a60 <ce_low+0x14>)
 8000a58:	f001 f8c6 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40020400 	.word	0x40020400

08000a64 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8000a72:	f7ff ffd3 	bl	8000a1c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000a76:	f107 020e 	add.w	r2, r7, #14
 8000a7a:	f107 010f 	add.w	r1, r7, #15
 8000a7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2301      	movs	r3, #1
 8000a86:	4809      	ldr	r0, [pc, #36]	; (8000aac <read_register+0x48>)
 8000a88:	f001 fff4 	bl	8002a74 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8000a8c:	f107 010d 	add.w	r1, r7, #13
 8000a90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a94:	2201      	movs	r2, #1
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <read_register+0x48>)
 8000a98:	f001 fedb 	bl	8002852 <HAL_SPI_Receive>
    cs_high();
 8000a9c:	f7ff ffb2 	bl	8000a04 <cs_high>

    return read_val;
 8000aa0:	7b7b      	ldrb	r3, [r7, #13]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000030 	.word	0x20000030

08000ab0 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	460a      	mov	r2, r1
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	4613      	mov	r3, r2
 8000abe:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f043 0320 	orr.w	r3, r3, #32
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000ace:	f7ff ffa5 	bl	8000a1c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000ad2:	f107 020e 	add.w	r2, r7, #14
 8000ad6:	f107 010f 	add.w	r1, r7, #15
 8000ada:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <write_register+0x58>)
 8000ae4:	f001 ffc6 	bl	8002a74 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8000ae8:	f107 010d 	add.w	r1, r7, #13
 8000aec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000af0:	2201      	movs	r2, #1
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <write_register+0x58>)
 8000af4:	f001 fd71 	bl	80025da <HAL_SPI_Transmit>
    cs_high();
 8000af8:	f7ff ff84 	bl	8000a04 <cs_high>

    return write_val;
 8000afc:	7b7b      	ldrb	r3, [r7, #13]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000030 	.word	0x20000030

08000b0c <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	460a      	mov	r2, r1
 8000b16:	80fb      	strh	r3, [r7, #6]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000b1c:	f000 f838 	bl	8000b90 <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 8000b20:	f000 f88a 	bl	8000c38 <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 8000b24:	f000 f92e 	bl	8000d84 <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f000 f909 	bl	8000d40 <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f9b3 	bl	8000e9c <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000b36:	797b      	ldrb	r3, [r7, #5]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 f9df 	bl	8000efc <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f000 f9bf 	bl	8000ec2 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 f932 	bl	8000dae <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8000b4a:	2005      	movs	r0, #5
 8000b4c:	f000 f952 	bl	8000df4 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f95f 	bl	8000e14 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000b56:	20fa      	movs	r0, #250	; 0xfa
 8000b58:	f000 f978 	bl	8000e4c <nrf24l01p_auto_retransmit_delay>
    
    ce_high();
 8000b5c:	f7ff ff6a 	bl	8000a34 <ce_high>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 f877 	bl	8000c64 <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 8000b76:	f000 f8f1 	bl	8000d5c <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <nrf24l01p_rx_receive+0x24>)
 8000b80:	f001 f84b 	bl	8001c1a <HAL_GPIO_TogglePin>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40020800 	.word	0x40020800

08000b90 <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8000b94:	f7ff ff36 	bl	8000a04 <cs_high>
    ce_low();
 8000b98:	f7ff ff58 	bl	8000a4c <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff ff86 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8000ba4:	213f      	movs	r1, #63	; 0x3f
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff ff82 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000bac:	2103      	movs	r1, #3
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f7ff ff7e 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f7ff ff7a 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000bbc:	2103      	movs	r1, #3
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f7ff ff76 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	2005      	movs	r0, #5
 8000bc8:	f7ff ff72 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000bcc:	2107      	movs	r1, #7
 8000bce:	2006      	movs	r0, #6
 8000bd0:	f7ff ff6e 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8000bd4:	217e      	movs	r1, #126	; 0x7e
 8000bd6:	2007      	movs	r0, #7
 8000bd8:	f7ff ff6a 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2011      	movs	r0, #17
 8000be0:	f7ff ff66 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000be4:	2100      	movs	r1, #0
 8000be6:	2011      	movs	r0, #17
 8000be8:	f7ff ff62 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000bec:	2100      	movs	r1, #0
 8000bee:	2012      	movs	r0, #18
 8000bf0:	f7ff ff5e 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2013      	movs	r0, #19
 8000bf8:	f7ff ff5a 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2014      	movs	r0, #20
 8000c00:	f7ff ff56 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8000c04:	2100      	movs	r1, #0
 8000c06:	2015      	movs	r0, #21
 8000c08:	f7ff ff52 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2016      	movs	r0, #22
 8000c10:	f7ff ff4e 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8000c14:	2111      	movs	r1, #17
 8000c16:	2017      	movs	r0, #23
 8000c18:	f7ff ff4a 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	201c      	movs	r0, #28
 8000c20:	f7ff ff46 	bl	8000ab0 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8000c24:	2100      	movs	r1, #0
 8000c26:	201d      	movs	r0, #29
 8000c28:	f7ff ff42 	bl	8000ab0 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000c2c:	f000 f83e 	bl	8000cac <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8000c30:	f000 f854 	bl	8000cdc <nrf24l01p_flush_tx_fifo>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff ff10 	bl	8000a64 <read_register>
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4619      	mov	r1, r3
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff ff2b 	bl	8000ab0 <write_register>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8000c6c:	2361      	movs	r3, #97	; 0x61
 8000c6e:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8000c70:	f7ff fed4 	bl	8000a1c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000c74:	f107 020e 	add.w	r2, r7, #14
 8000c78:	f107 010f 	add.w	r1, r7, #15
 8000c7c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2301      	movs	r3, #1
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <nrf24l01p_read_rx_fifo+0x44>)
 8000c86:	f001 fef5 	bl	8002a74 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000c8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c8e:	2201      	movs	r2, #1
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <nrf24l01p_read_rx_fifo+0x44>)
 8000c94:	f001 fddd 	bl	8002852 <HAL_SPI_Receive>
    cs_high();
 8000c98:	f7ff feb4 	bl	8000a04 <cs_high>

    return status;
 8000c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000030 	.word	0x20000030

08000cac <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8000cb2:	23e2      	movs	r3, #226	; 0xe2
 8000cb4:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000cb6:	f7ff feb1 	bl	8000a1c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000cba:	1dba      	adds	r2, r7, #6
 8000cbc:	1df9      	adds	r1, r7, #7
 8000cbe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <nrf24l01p_flush_rx_fifo+0x2c>)
 8000cc8:	f001 fed4 	bl	8002a74 <HAL_SPI_TransmitReceive>
    cs_high();
 8000ccc:	f7ff fe9a 	bl	8000a04 <cs_high>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000030 	.word	0x20000030

08000cdc <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8000ce2:	23e1      	movs	r3, #225	; 0xe1
 8000ce4:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000ce6:	f7ff fe99 	bl	8000a1c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000cea:	1dba      	adds	r2, r7, #6
 8000cec:	1df9      	adds	r1, r7, #7
 8000cee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	4804      	ldr	r0, [pc, #16]	; (8000d08 <nrf24l01p_flush_tx_fifo+0x2c>)
 8000cf8:	f001 febc 	bl	8002a74 <HAL_SPI_TransmitReceive>
    cs_high();
 8000cfc:	f7ff fe82 	bl	8000a04 <cs_high>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000030 	.word	0x20000030

08000d0c <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8000d12:	23ff      	movs	r3, #255	; 0xff
 8000d14:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000d16:	f7ff fe81 	bl	8000a1c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000d1a:	1dba      	adds	r2, r7, #6
 8000d1c:	1df9      	adds	r1, r7, #7
 8000d1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2301      	movs	r3, #1
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <nrf24l01p_get_status+0x30>)
 8000d28:	f001 fea4 	bl	8002a74 <HAL_SPI_TransmitReceive>
    cs_high(); 
 8000d2c:	f7ff fe6a 	bl	8000a04 <cs_high>

    return status;
 8000d30:	79bb      	ldrb	r3, [r7, #6]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000030 	.word	0x20000030

08000d40 <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	2011      	movs	r0, #17
 8000d50:	f7ff feae 	bl	8000ab0 <write_register>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000d62:	f7ff ffd3 	bl	8000d0c <nrf24l01p_get_status>
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d70:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4619      	mov	r1, r3
 8000d76:	2007      	movs	r0, #7
 8000d78:	f7ff fe9a 	bl	8000ab0 <write_register>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status); 
}

void nrf24l01p_power_up()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff fe6a 	bl	8000a64 <read_register>
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fe85 	bl	8000ab0 <write_register>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b084      	sub	sp, #16
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff fe53 	bl	8000a64 <read_register>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d002      	beq.n	8000dce <nrf24l01p_set_crc_length+0x20>
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d005      	beq.n	8000dd8 <nrf24l01p_set_crc_length+0x2a>
 8000dcc:	e009      	b.n	8000de2 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	f023 0304 	bic.w	r3, r3, #4
 8000dd4:	73fb      	strb	r3, [r7, #15]
            break;
 8000dd6:	e004      	b.n	8000de2 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	73fb      	strb	r3, [r7, #15]
            break;
 8000de0:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	4619      	mov	r1, r3
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fe62 	bl	8000ab0 <write_register>
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	3b02      	subs	r3, #2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4619      	mov	r1, r3
 8000e06:	2003      	movs	r0, #3
 8000e08:	f7ff fe52 	bl	8000ab0 <write_register>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000e1e:	2004      	movs	r0, #4
 8000e20:	f7ff fe20 	bl	8000a64 <read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	f063 030f 	orn	r3, r3, #15
 8000e2e:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	2004      	movs	r0, #4
 8000e3e:	f7ff fe37 	bl	8000ab0 <write_register>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000e56:	2004      	movs	r0, #4
 8000e58:	f7ff fe04 	bl	8000a64 <read_register>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	f043 030f 	orr.w	r3, r3, #15
 8000e66:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8000e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	3b01      	subs	r3, #1
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	4619      	mov	r1, r3
 8000e88:	2004      	movs	r0, #4
 8000e8a:	f7ff fe11 	bl	8000ab0 <write_register>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	10624dd3 	.word	0x10624dd3

08000e9c <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8000eac:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	2005      	movs	r0, #5
 8000eb6:	f7ff fdfb 	bl	8000ab0 <write_register>
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000ecc:	2006      	movs	r0, #6
 8000ece:	f7ff fdc9 	bl	8000a64 <read_register>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f023 0306 	bic.w	r3, r3, #6
 8000ed8:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	b25a      	sxtb	r2, r3
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	4619      	mov	r1, r3
 8000eee:	2006      	movs	r0, #6
 8000ef0:	f7ff fdde 	bl	8000ab0 <write_register>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000f06:	2006      	movs	r0, #6
 8000f08:	f7ff fdac 	bl	8000a64 <read_register>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f12:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d00a      	beq.n	8000f30 <nrf24l01p_set_rf_air_data_rate+0x34>
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	dc0e      	bgt.n	8000f3c <nrf24l01p_set_rf_air_data_rate+0x40>
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00b      	beq.n	8000f3a <nrf24l01p_set_rf_air_data_rate+0x3e>
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d10a      	bne.n	8000f3c <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	73fb      	strb	r3, [r7, #15]
            break;
 8000f2e:	e005      	b.n	8000f3c <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	f043 0320 	orr.w	r3, r3, #32
 8000f36:	73fb      	strb	r3, [r7, #15]
            break;
 8000f38:	e000      	b.n	8000f3c <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8000f3a:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	2006      	movs	r0, #6
 8000f42:	f7ff fdb5 	bl	8000ab0 <write_register>
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f56:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <MX_SPI2_Init+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f84:	2210      	movs	r2, #16
 8000f86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000f9c:	220a      	movs	r2, #10
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_SPI2_Init+0x64>)
 8000fa2:	f001 fa91 	bl	80024c8 <HAL_SPI_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fac:	f7ff fd24 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000030 	.word	0x20000030
 8000fb8:	40003800 	.word	0x40003800

08000fbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	; (8001040 <HAL_SPI_MspInit+0x84>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12c      	bne.n	8001038 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_SPI_MspInit+0x88>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_SPI_MspInit+0x88>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_SPI_MspInit+0x88>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_SPI_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <HAL_SPI_MspInit+0x88>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_SPI_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001016:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001028:	2305      	movs	r3, #5
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_SPI_MspInit+0x8c>)
 8001034:	f000 fc3c 	bl	80018b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40003800 	.word	0x40003800
 8001044:	40023800 	.word	0x40023800
 8001048:	40020400 	.word	0x40020400

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <HAL_MspInit+0x4c>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_MspInit+0x4c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_MspInit+0x4c>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_MspInit+0x4c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x4>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e8:	f000 fab0 	bl	800164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 80010f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010f8:	f000 fdaa 	bl	8001c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (HAL_GPIO_ReadPin(WallDet_GPIO_Port, WallDet_Pin))
 8001104:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <EXTI15_10_IRQHandler+0x34>)
 800110a:	f000 fd55 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <EXTI15_10_IRQHandler+0x1c>
		  {
			  wallFlag = 0;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <EXTI15_10_IRQHandler+0x38>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	e004      	b.n	8001126 <EXTI15_10_IRQHandler+0x26>
		  }
		  else
		  {
			  wallFlag = 1;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <EXTI15_10_IRQHandler+0x38>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
			  StepBack();
 8001122:	f7ff fc29 	bl	8000978 <StepBack>
		  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WallDet_Pin);
 8001126:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800112a:	f000 fd91 	bl	8001c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40020800 	.word	0x40020800
 8001138:	20000029 	.word	0x20000029

0800113c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	TuneEngine();
 8001140:	f7ff fb14 	bl	800076c <TuneEngine>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <TIM5_IRQHandler+0x14>)
 8001146:	f002 f923 	bl	8003390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000118 	.word	0x20000118

08001154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
 80011a4:	615a      	str	r2, [r3, #20]
 80011a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <MX_TIM2_Init+0xe8>)
 80011aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_TIM2_Init+0xe8>)
 80011b2:	220f      	movs	r2, #15
 80011b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <MX_TIM2_Init+0xe8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <MX_TIM2_Init+0xe8>)
 80011be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <MX_TIM2_Init+0xe8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <MX_TIM2_Init+0xe8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011d0:	4823      	ldr	r0, [pc, #140]	; (8001260 <MX_TIM2_Init+0xe8>)
 80011d2:	f001 ff21 	bl	8003018 <HAL_TIM_Base_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011dc:	f7ff fc0c 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ea:	4619      	mov	r1, r3
 80011ec:	481c      	ldr	r0, [pc, #112]	; (8001260 <MX_TIM2_Init+0xe8>)
 80011ee:	f002 fa99 	bl	8003724 <HAL_TIM_ConfigClockSource>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80011f8:	f7ff fbfe 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011fc:	4818      	ldr	r0, [pc, #96]	; (8001260 <MX_TIM2_Init+0xe8>)
 80011fe:	f001 ffbd 	bl	800317c <HAL_TIM_PWM_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001208:	f7ff fbf6 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	4619      	mov	r1, r3
 800121a:	4811      	ldr	r0, [pc, #68]	; (8001260 <MX_TIM2_Init+0xe8>)
 800121c:	f002 fe48 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001226:	f7ff fbe7 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122a:	2360      	movs	r3, #96	; 0x60
 800122c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800122e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001232:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	4807      	ldr	r0, [pc, #28]	; (8001260 <MX_TIM2_Init+0xe8>)
 8001244:	f002 f9ac 	bl	80035a0 <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800124e:	f7ff fbd3 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <MX_TIM2_Init+0xe8>)
 8001254:	f000 f91e 	bl	8001494 <HAL_TIM_MspPostInit>

}
 8001258:	bf00      	nop
 800125a:	3738      	adds	r7, #56	; 0x38
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000088 	.word	0x20000088

08001264 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08e      	sub	sp, #56	; 0x38
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	615a      	str	r2, [r3, #20]
 8001292:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_TIM3_Init+0xe8>)
 8001296:	4a2e      	ldr	r2, [pc, #184]	; (8001350 <MX_TIM3_Init+0xec>)
 8001298:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_TIM3_Init+0xe8>)
 800129c:	220f      	movs	r2, #15
 800129e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_TIM3_Init+0xe8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_TIM3_Init+0xe8>)
 80012a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_TIM3_Init+0xe8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_TIM3_Init+0xe8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012ba:	4824      	ldr	r0, [pc, #144]	; (800134c <MX_TIM3_Init+0xe8>)
 80012bc:	f001 feac 	bl	8003018 <HAL_TIM_Base_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012c6:	f7ff fb97 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d4:	4619      	mov	r1, r3
 80012d6:	481d      	ldr	r0, [pc, #116]	; (800134c <MX_TIM3_Init+0xe8>)
 80012d8:	f002 fa24 	bl	8003724 <HAL_TIM_ConfigClockSource>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012e2:	f7ff fb89 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012e6:	4819      	ldr	r0, [pc, #100]	; (800134c <MX_TIM3_Init+0xe8>)
 80012e8:	f001 ff48 	bl	800317c <HAL_TIM_PWM_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012f2:	f7ff fb81 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	4619      	mov	r1, r3
 8001304:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_TIM3_Init+0xe8>)
 8001306:	f002 fdd3 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001310:	f7ff fb72 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001314:	2360      	movs	r3, #96	; 0x60
 8001316:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001318:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800131c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_TIM3_Init+0xe8>)
 800132e:	f002 f937 	bl	80035a0 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001338:	f7ff fb5e 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <MX_TIM3_Init+0xe8>)
 800133e:	f000 f8a9 	bl	8001494 <HAL_TIM_MspPostInit>

}
 8001342:	bf00      	nop
 8001344:	3738      	adds	r7, #56	; 0x38
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200000d0 	.word	0x200000d0
 8001350:	40000400 	.word	0x40000400

08001354 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_TIM5_Init+0x94>)
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <MX_TIM5_Init+0x98>)
 8001374:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16000-1;
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_TIM5_Init+0x94>)
 8001378:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800137c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_TIM5_Init+0x94>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_TIM5_Init+0x94>)
 8001386:	2263      	movs	r2, #99	; 0x63
 8001388:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_TIM5_Init+0x94>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_TIM5_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001396:	4814      	ldr	r0, [pc, #80]	; (80013e8 <MX_TIM5_Init+0x94>)
 8001398:	f001 fe3e 	bl	8003018 <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80013a2:	f7ff fb29 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4619      	mov	r1, r3
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_TIM5_Init+0x94>)
 80013b4:	f002 f9b6 	bl	8003724 <HAL_TIM_ConfigClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80013be:	f7ff fb1b 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_TIM5_Init+0x94>)
 80013d0:	f002 fd6e 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80013da:	f7ff fb0d 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000118 	.word	0x20000118
 80013ec:	40000c00 	.word	0x40000c00

080013f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001400:	d10e      	bne.n	8001420 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800141e:	e02e      	b.n	800147e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a19      	ldr	r2, [pc, #100]	; (800148c <HAL_TIM_Base_MspInit+0x9c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10e      	bne.n	8001448 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
}
 8001446:	e01a      	b.n	800147e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_TIM_Base_MspInit+0xa0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d115      	bne.n	800147e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_TIM_Base_MspInit+0x98>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	2032      	movs	r0, #50	; 0x32
 8001474:	f000 f9e5 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001478:	2032      	movs	r0, #50	; 0x32
 800147a:	f000 f9fe 	bl	800187a <HAL_NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40000400 	.word	0x40000400
 8001490:	40000c00 	.word	0x40000c00

08001494 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b4:	d11f      	bne.n	80014f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_TIM_MspPostInit+0xb0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a21      	ldr	r2, [pc, #132]	; (8001544 <HAL_TIM_MspPostInit+0xb0>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_TIM_MspPostInit+0xb0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = en12_Pin;
 80014d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014e4:	2301      	movs	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(en12_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4816      	ldr	r0, [pc, #88]	; (8001548 <HAL_TIM_MspPostInit+0xb4>)
 80014f0:	f000 f9de 	bl	80018b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014f4:	e022      	b.n	800153c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a14      	ldr	r2, [pc, #80]	; (800154c <HAL_TIM_MspPostInit+0xb8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d11d      	bne.n	800153c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_TIM_MspPostInit+0xb0>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_TIM_MspPostInit+0xb0>)
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_TIM_MspPostInit+0xb0>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = en34_Pin;
 800151c:	2310      	movs	r3, #16
 800151e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800152c:	2302      	movs	r3, #2
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(en34_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <HAL_TIM_MspPostInit+0xbc>)
 8001538:	f000 f9ba 	bl	80018b0 <HAL_GPIO_Init>
}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	40000400 	.word	0x40000400
 8001550:	40020400 	.word	0x40020400

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800155a:	490e      	ldr	r1, [pc, #56]	; (8001594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001570:	4c0b      	ldr	r4, [pc, #44]	; (80015a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157e:	f7ff fde9 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001582:	f002 fd17 	bl	8003fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff f863 	bl	8000650 <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800158c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001598:	08004044 	.word	0x08004044
  ldr r2, =_sbss
 800159c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015a0:	20000164 	.word	0x20000164

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <HAL_Init+0x40>)
 80015b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_Init+0x40>)
 80015be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_Init+0x40>)
 80015ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f92b 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	200f      	movs	r0, #15
 80015d8:	f000 f808 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff fd36 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x54>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x58>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f943 	bl	8001896 <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e00e      	b.n	8001638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d80a      	bhi.n	8001636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f000 f90b 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_InitTick+0x5c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000000 	.word	0x20000000
 8001644:	20000008 	.word	0x20000008
 8001648:	20000004 	.word	0x20000004

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008
 8001670:	20000160 	.word	0x20000160

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000160 	.word	0x20000160

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff29 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff3e 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff31 	bl	80016f0 <__NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffa2 	bl	80017e8 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e159      	b.n	8001b80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 8148 	bne.w	8001b7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d005      	beq.n	8001902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d130      	bne.n	8001964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 0201 	and.w	r2, r3, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b03      	cmp	r3, #3
 800196e:	d017      	beq.n	80019a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d123      	bne.n	80019f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	69b9      	ldr	r1, [r7, #24]
 80019f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0203 	and.w	r2, r3, #3
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80a2 	beq.w	8001b7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b57      	ldr	r3, [pc, #348]	; (8001b98 <HAL_GPIO_Init+0x2e8>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a56      	ldr	r2, [pc, #344]	; (8001b98 <HAL_GPIO_Init+0x2e8>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <HAL_GPIO_Init+0x2e8>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a52:	4a52      	ldr	r2, [pc, #328]	; (8001b9c <HAL_GPIO_Init+0x2ec>)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <HAL_GPIO_Init+0x2f0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d019      	beq.n	8001ab2 <HAL_GPIO_Init+0x202>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a48      	ldr	r2, [pc, #288]	; (8001ba4 <HAL_GPIO_Init+0x2f4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0x1fe>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a47      	ldr	r2, [pc, #284]	; (8001ba8 <HAL_GPIO_Init+0x2f8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a46      	ldr	r2, [pc, #280]	; (8001bac <HAL_GPIO_Init+0x2fc>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x1f6>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a45      	ldr	r2, [pc, #276]	; (8001bb0 <HAL_GPIO_Init+0x300>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_Init+0x1f2>
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	e008      	b.n	8001ab4 <HAL_GPIO_Init+0x204>
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x204>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e004      	b.n	8001ab4 <HAL_GPIO_Init+0x204>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_Init+0x204>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x204>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	f002 0203 	and.w	r2, r2, #3
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4093      	lsls	r3, r2
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac4:	4935      	ldr	r1, [pc, #212]	; (8001b9c <HAL_GPIO_Init+0x2ec>)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001af6:	4a2f      	ldr	r2, [pc, #188]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b20:	4a24      	ldr	r2, [pc, #144]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b26:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b4a:	4a1a      	ldr	r2, [pc, #104]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b74:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	f67f aea2 	bls.w	80018cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40013800 	.word	0x40013800
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40020c00 	.word	0x40020c00
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40013c00 	.word	0x40013c00

08001bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e001      	b.n	8001bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c04:	e003      	b.n	8001c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	619a      	str	r2, [r3, #24]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c2c:	887a      	ldrh	r2, [r7, #2]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4013      	ands	r3, r2
 8001c32:	041a      	lsls	r2, r3, #16
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	400b      	ands	r3, r1
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fd6a 	bl	8000748 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40013c00 	.word	0x40013c00

08001c80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e267      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d075      	beq.n	8001d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c9e:	4b88      	ldr	r3, [pc, #544]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001caa:	4b85      	ldr	r3, [pc, #532]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d112      	bne.n	8001cdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb6:	4b82      	ldr	r3, [pc, #520]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cc2:	d10b      	bne.n	8001cdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	4b7e      	ldr	r3, [pc, #504]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d05b      	beq.n	8001d88 <HAL_RCC_OscConfig+0x108>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d157      	bne.n	8001d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e242      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce4:	d106      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x74>
 8001ce6:	4b76      	ldr	r3, [pc, #472]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a75      	ldr	r2, [pc, #468]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e01d      	b.n	8001d30 <HAL_RCC_OscConfig+0xb0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x98>
 8001cfe:	4b70      	ldr	r3, [pc, #448]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a6f      	ldr	r2, [pc, #444]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	4b6d      	ldr	r3, [pc, #436]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6c      	ldr	r2, [pc, #432]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e00b      	b.n	8001d30 <HAL_RCC_OscConfig+0xb0>
 8001d18:	4b69      	ldr	r3, [pc, #420]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a68      	ldr	r2, [pc, #416]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b66      	ldr	r3, [pc, #408]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a65      	ldr	r2, [pc, #404]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d013      	beq.n	8001d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fc9c 	bl	8001674 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fc98 	bl	8001674 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e207      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	4b5b      	ldr	r3, [pc, #364]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0xc0>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff fc88 	bl	8001674 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d68:	f7ff fc84 	bl	8001674 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e1f3      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7a:	4b51      	ldr	r3, [pc, #324]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0xe8>
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d063      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d96:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da2:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d11c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dae:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d116      	bne.n	8001de8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x152>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e1c7      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4937      	ldr	r1, [pc, #220]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de6:	e03a      	b.n	8001e5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df0:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <HAL_RCC_OscConfig+0x244>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7ff fc3d 	bl	8001674 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7ff fc39 	bl	8001674 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e1a8      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4925      	ldr	r1, [pc, #148]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]
 8001e30:	e015      	b.n	8001e5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_OscConfig+0x244>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff fc1c 	bl	8001674 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e40:	f7ff fc18 	bl	8001674 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e187      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d036      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d016      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_RCC_OscConfig+0x248>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e78:	f7ff fbfc 	bl	8001674 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e80:	f7ff fbf8 	bl	8001674 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e167      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_OscConfig+0x240>)
 8001e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x200>
 8001e9e:	e01b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_OscConfig+0x248>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fbe5 	bl	8001674 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	e00e      	b.n	8001ecc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eae:	f7ff fbe1 	bl	8001674 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d907      	bls.n	8001ecc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e150      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	42470000 	.word	0x42470000
 8001ec8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ecc:	4b88      	ldr	r3, [pc, #544]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1ea      	bne.n	8001eae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 8097 	beq.w	8002014 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eea:	4b81      	ldr	r3, [pc, #516]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10f      	bne.n	8001f16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b7d      	ldr	r3, [pc, #500]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a7c      	ldr	r2, [pc, #496]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b7a      	ldr	r3, [pc, #488]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f12:	2301      	movs	r3, #1
 8001f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	4b77      	ldr	r3, [pc, #476]	; (80020f4 <HAL_RCC_OscConfig+0x474>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d118      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f22:	4b74      	ldr	r3, [pc, #464]	; (80020f4 <HAL_RCC_OscConfig+0x474>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a73      	ldr	r2, [pc, #460]	; (80020f4 <HAL_RCC_OscConfig+0x474>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2e:	f7ff fba1 	bl	8001674 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f36:	f7ff fb9d 	bl	8001674 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e10c      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	4b6a      	ldr	r3, [pc, #424]	; (80020f4 <HAL_RCC_OscConfig+0x474>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x2ea>
 8001f5c:	4b64      	ldr	r3, [pc, #400]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	4a63      	ldr	r2, [pc, #396]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6713      	str	r3, [r2, #112]	; 0x70
 8001f68:	e01c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x324>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x30c>
 8001f72:	4b5f      	ldr	r3, [pc, #380]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	4a5e      	ldr	r2, [pc, #376]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7e:	4b5c      	ldr	r3, [pc, #368]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	4a5b      	ldr	r2, [pc, #364]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCC_OscConfig+0x324>
 8001f8c:	4b58      	ldr	r3, [pc, #352]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a57      	ldr	r2, [pc, #348]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
 8001f98:	4b55      	ldr	r3, [pc, #340]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	4a54      	ldr	r2, [pc, #336]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	f023 0304 	bic.w	r3, r3, #4
 8001fa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d015      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7ff fb62 	bl	8001674 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7ff fb5e 	bl	8001674 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e0cb      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fca:	4b49      	ldr	r3, [pc, #292]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0ee      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x334>
 8001fd6:	e014      	b.n	8002002 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7ff fb4c 	bl	8001674 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe0:	f7ff fb48 	bl	8001674 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e0b5      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff6:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ee      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	4a38      	ldr	r2, [pc, #224]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 800200e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002012:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80a1 	beq.w	8002160 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800201e:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b08      	cmp	r3, #8
 8002028:	d05c      	beq.n	80020e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d141      	bne.n	80020b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <HAL_RCC_OscConfig+0x478>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff fb1c 	bl	8001674 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002040:	f7ff fb18 	bl	8001674 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e087      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69da      	ldr	r2, [r3, #28]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	019b      	lsls	r3, r3, #6
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	3b01      	subs	r3, #1
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	491b      	ldr	r1, [pc, #108]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_RCC_OscConfig+0x478>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff faf1 	bl	8001674 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002096:	f7ff faed 	bl	8001674 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e05c      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x416>
 80020b4:	e054      	b.n	8002160 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_RCC_OscConfig+0x478>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fada 	bl	8001674 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff fad6 	bl	8001674 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e045      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RCC_OscConfig+0x470>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x444>
 80020e2:	e03d      	b.n	8002160 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e038      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40007000 	.word	0x40007000
 80020f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCC_OscConfig+0x4ec>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d028      	beq.n	800215c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d121      	bne.n	800215c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d11a      	bne.n	800215c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800212c:	4013      	ands	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002134:	4293      	cmp	r3, r2
 8002136:	d111      	bne.n	800215c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	085b      	lsrs	r3, r3, #1
 8002144:	3b01      	subs	r3, #1
 8002146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800

08002170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0cc      	b.n	800231e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b68      	ldr	r3, [pc, #416]	; (8002328 <HAL_RCC_ClockConfig+0x1b8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d90c      	bls.n	80021ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b65      	ldr	r3, [pc, #404]	; (8002328 <HAL_RCC_ClockConfig+0x1b8>)
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b63      	ldr	r3, [pc, #396]	; (8002328 <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0b8      	b.n	800231e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d020      	beq.n	80021fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c4:	4b59      	ldr	r3, [pc, #356]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	4a58      	ldr	r2, [pc, #352]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021dc:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4a52      	ldr	r2, [pc, #328]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e8:	4b50      	ldr	r3, [pc, #320]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	494d      	ldr	r1, [pc, #308]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d044      	beq.n	8002290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b47      	ldr	r3, [pc, #284]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d119      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e07f      	b.n	800231e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d003      	beq.n	800222e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800222a:	2b03      	cmp	r3, #3
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222e:	4b3f      	ldr	r3, [pc, #252]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e06f      	b.n	800231e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223e:	4b3b      	ldr	r3, [pc, #236]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e067      	b.n	800231e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224e:	4b37      	ldr	r3, [pc, #220]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f023 0203 	bic.w	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4934      	ldr	r1, [pc, #208]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	4313      	orrs	r3, r2
 800225e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002260:	f7ff fa08 	bl	8001674 <HAL_GetTick>
 8002264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	e00a      	b.n	800227e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002268:	f7ff fa04 	bl	8001674 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	; 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e04f      	b.n	800231e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 020c 	and.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	429a      	cmp	r2, r3
 800228e:	d1eb      	bne.n	8002268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <HAL_RCC_ClockConfig+0x1b8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d20c      	bcs.n	80022b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_RCC_ClockConfig+0x1b8>)
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <HAL_RCC_ClockConfig+0x1b8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e032      	b.n	800231e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4916      	ldr	r1, [pc, #88]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	490e      	ldr	r1, [pc, #56]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022f6:	f000 f821 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80022fa:	4602      	mov	r2, r0
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	490a      	ldr	r1, [pc, #40]	; (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	5ccb      	ldrb	r3, [r1, r3]
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	4a09      	ldr	r2, [pc, #36]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1c8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f968 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023c00 	.word	0x40023c00
 800232c:	40023800 	.word	0x40023800
 8002330:	08004024 	.word	0x08004024
 8002334:	20000000 	.word	0x20000000
 8002338:	20000004 	.word	0x20000004

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002340:	b090      	sub	sp, #64	; 0x40
 8002342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
 8002348:	2300      	movs	r3, #0
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800234c:	2300      	movs	r3, #0
 800234e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d00d      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x40>
 8002360:	2b08      	cmp	r3, #8
 8002362:	f200 80a1 	bhi.w	80024a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x34>
 800236a:	2b04      	cmp	r3, #4
 800236c:	d003      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x3a>
 800236e:	e09b      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002372:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002374:	e09b      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002376:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002378:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800237a:	e098      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800237c:	4b4f      	ldr	r3, [pc, #316]	; (80024bc <HAL_RCC_GetSysClockFreq+0x180>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002384:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002386:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d028      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002392:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	099b      	lsrs	r3, r3, #6
 8002398:	2200      	movs	r2, #0
 800239a:	623b      	str	r3, [r7, #32]
 800239c:	627a      	str	r2, [r7, #36]	; 0x24
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023a4:	2100      	movs	r1, #0
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80023a8:	fb03 f201 	mul.w	r2, r3, r1
 80023ac:	2300      	movs	r3, #0
 80023ae:	fb00 f303 	mul.w	r3, r0, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	4a43      	ldr	r2, [pc, #268]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80023b6:	fba0 1202 	umull	r1, r2, r0, r2
 80023ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023bc:	460a      	mov	r2, r1
 80023be:	62ba      	str	r2, [r7, #40]	; 0x28
 80023c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c2:	4413      	add	r3, r2
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c8:	2200      	movs	r2, #0
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	61fa      	str	r2, [r7, #28]
 80023ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023d6:	f7fd fefd 	bl	80001d4 <__aeabi_uldivmod>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4613      	mov	r3, r2
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023e2:	e053      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e4:	4b35      	ldr	r3, [pc, #212]	; (80024bc <HAL_RCC_GetSysClockFreq+0x180>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	2200      	movs	r2, #0
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	617a      	str	r2, [r7, #20]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023f6:	f04f 0b00 	mov.w	fp, #0
 80023fa:	4652      	mov	r2, sl
 80023fc:	465b      	mov	r3, fp
 80023fe:	f04f 0000 	mov.w	r0, #0
 8002402:	f04f 0100 	mov.w	r1, #0
 8002406:	0159      	lsls	r1, r3, #5
 8002408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800240c:	0150      	lsls	r0, r2, #5
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	ebb2 080a 	subs.w	r8, r2, sl
 8002416:	eb63 090b 	sbc.w	r9, r3, fp
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002426:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800242a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800242e:	ebb2 0408 	subs.w	r4, r2, r8
 8002432:	eb63 0509 	sbc.w	r5, r3, r9
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	00eb      	lsls	r3, r5, #3
 8002440:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002444:	00e2      	lsls	r2, r4, #3
 8002446:	4614      	mov	r4, r2
 8002448:	461d      	mov	r5, r3
 800244a:	eb14 030a 	adds.w	r3, r4, sl
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	eb45 030b 	adc.w	r3, r5, fp
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002462:	4629      	mov	r1, r5
 8002464:	028b      	lsls	r3, r1, #10
 8002466:	4621      	mov	r1, r4
 8002468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800246c:	4621      	mov	r1, r4
 800246e:	028a      	lsls	r2, r1, #10
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002476:	2200      	movs	r2, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	60fa      	str	r2, [r7, #12]
 800247c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002480:	f7fd fea8 	bl	80001d4 <__aeabi_uldivmod>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4613      	mov	r3, r2
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_GetSysClockFreq+0x180>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	3301      	adds	r3, #1
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800249c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024a6:	e002      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3740      	adds	r7, #64	; 0x40
 80024b4:	46bd      	mov	sp, r7
 80024b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	00f42400 	.word	0x00f42400
 80024c4:	017d7840 	.word	0x017d7840

080024c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07b      	b.n	80025d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d108      	bne.n	80024f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ea:	d009      	beq.n	8002500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
 80024f2:	e005      	b.n	8002500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe fd4e 	bl	8000fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002584:	ea42 0103 	orr.w	r1, r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	f003 0104 	and.w	r1, r3, #4
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	f003 0210 	and.w	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b088      	sub	sp, #32
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_SPI_Transmit+0x22>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e126      	b.n	800284a <HAL_SPI_Transmit+0x270>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002604:	f7ff f836 	bl	8001674 <HAL_GetTick>
 8002608:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d002      	beq.n	8002620 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800261a:	2302      	movs	r3, #2
 800261c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800261e:	e10b      	b.n	8002838 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_SPI_Transmit+0x52>
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002630:	e102      	b.n	8002838 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2203      	movs	r2, #3
 8002636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	88fa      	ldrh	r2, [r7, #6]
 800264a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	88fa      	ldrh	r2, [r7, #6]
 8002650:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002678:	d10f      	bne.n	800269a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002688:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002698:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d007      	beq.n	80026b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c0:	d14b      	bne.n	800275a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_SPI_Transmit+0xf6>
 80026ca:	8afb      	ldrh	r3, [r7, #22]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d13e      	bne.n	800274e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	881a      	ldrh	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	1c9a      	adds	r2, r3, #2
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026f4:	e02b      	b.n	800274e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b02      	cmp	r3, #2
 8002702:	d112      	bne.n	800272a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	881a      	ldrh	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	1c9a      	adds	r2, r3, #2
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	86da      	strh	r2, [r3, #54]	; 0x36
 8002728:	e011      	b.n	800274e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800272a:	f7fe ffa3 	bl	8001674 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d803      	bhi.n	8002742 <HAL_SPI_Transmit+0x168>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d102      	bne.n	8002748 <HAL_SPI_Transmit+0x16e>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800274c:	e074      	b.n	8002838 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ce      	bne.n	80026f6 <HAL_SPI_Transmit+0x11c>
 8002758:	e04c      	b.n	80027f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_SPI_Transmit+0x18e>
 8002762:	8afb      	ldrh	r3, [r7, #22]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d140      	bne.n	80027ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	7812      	ldrb	r2, [r2, #0]
 8002774:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800278e:	e02c      	b.n	80027ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b02      	cmp	r3, #2
 800279c:	d113      	bne.n	80027c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	330c      	adds	r3, #12
 80027a8:	7812      	ldrb	r2, [r2, #0]
 80027aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80027c4:	e011      	b.n	80027ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027c6:	f7fe ff55 	bl	8001674 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d803      	bhi.n	80027de <HAL_SPI_Transmit+0x204>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d102      	bne.n	80027e4 <HAL_SPI_Transmit+0x20a>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027e8:	e026      	b.n	8002838 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1cd      	bne.n	8002790 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	6839      	ldr	r1, [r7, #0]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fbcb 	bl	8002f94 <SPI_EndRxTxTransaction>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	77fb      	strb	r3, [r7, #31]
 8002834:	e000      	b.n	8002838 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002836:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002848:	7ffb      	ldrb	r3, [r7, #31]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b088      	sub	sp, #32
 8002856:	af02      	add	r7, sp, #8
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800286e:	d112      	bne.n	8002896 <HAL_SPI_Receive+0x44>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10e      	bne.n	8002896 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2204      	movs	r2, #4
 800287c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f8f1 	bl	8002a74 <HAL_SPI_TransmitReceive>
 8002892:	4603      	mov	r3, r0
 8002894:	e0ea      	b.n	8002a6c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_SPI_Receive+0x52>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e0e3      	b.n	8002a6c <HAL_SPI_Receive+0x21a>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028ac:	f7fe fee2 	bl	8001674 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d002      	beq.n	80028c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80028be:	2302      	movs	r3, #2
 80028c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028c2:	e0ca      	b.n	8002a5a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_SPI_Receive+0x7e>
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028d4:	e0c1      	b.n	8002a5a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2204      	movs	r2, #4
 80028da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	88fa      	ldrh	r2, [r7, #6]
 80028ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	88fa      	ldrh	r2, [r7, #6]
 80028f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800291c:	d10f      	bne.n	800293e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002948:	2b40      	cmp	r3, #64	; 0x40
 800294a:	d007      	beq.n	800295c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800295a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d162      	bne.n	8002a2a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002964:	e02e      	b.n	80029c4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d115      	bne.n	80029a0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f103 020c 	add.w	r2, r3, #12
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	7812      	ldrb	r2, [r2, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800299e:	e011      	b.n	80029c4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029a0:	f7fe fe68 	bl	8001674 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d803      	bhi.n	80029b8 <HAL_SPI_Receive+0x166>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d102      	bne.n	80029be <HAL_SPI_Receive+0x16c>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d102      	bne.n	80029c4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80029c2:	e04a      	b.n	8002a5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1cb      	bne.n	8002966 <HAL_SPI_Receive+0x114>
 80029ce:	e031      	b.n	8002a34 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d113      	bne.n	8002a06 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	b292      	uxth	r2, r2
 80029ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	1c9a      	adds	r2, r3, #2
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a04:	e011      	b.n	8002a2a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a06:	f7fe fe35 	bl	8001674 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d803      	bhi.n	8002a1e <HAL_SPI_Receive+0x1cc>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d102      	bne.n	8002a24 <HAL_SPI_Receive+0x1d2>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a28:	e017      	b.n	8002a5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1cd      	bne.n	80029d0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	6839      	ldr	r1, [r7, #0]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fa45 	bl	8002ec8 <SPI_EndRxTransaction>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
 8002a56:	e000      	b.n	8002a5a <HAL_SPI_Receive+0x208>
  }

error :
 8002a58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	; 0x30
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a82:	2301      	movs	r3, #1
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_SPI_TransmitReceive+0x26>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e18a      	b.n	8002db0 <HAL_SPI_TransmitReceive+0x33c>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aa2:	f7fe fde7 	bl	8001674 <HAL_GetTick>
 8002aa6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ab8:	887b      	ldrh	r3, [r7, #2]
 8002aba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002abc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d00f      	beq.n	8002ae4 <HAL_SPI_TransmitReceive+0x70>
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aca:	d107      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d103      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x68>
 8002ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d003      	beq.n	8002ae4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
 8002ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ae2:	e15b      	b.n	8002d9c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_SPI_TransmitReceive+0x82>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_SPI_TransmitReceive+0x82>
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002afc:	e14e      	b.n	8002d9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d003      	beq.n	8002b12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2205      	movs	r2, #5
 8002b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	887a      	ldrh	r2, [r7, #2]
 8002b22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	887a      	ldrh	r2, [r7, #2]
 8002b3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d007      	beq.n	8002b66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b6e:	d178      	bne.n	8002c62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_SPI_TransmitReceive+0x10a>
 8002b78:	8b7b      	ldrh	r3, [r7, #26]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d166      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	881a      	ldrh	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	1c9a      	adds	r2, r3, #2
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ba2:	e053      	b.n	8002c4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d11b      	bne.n	8002bea <HAL_SPI_TransmitReceive+0x176>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d016      	beq.n	8002bea <HAL_SPI_TransmitReceive+0x176>
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d113      	bne.n	8002bea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	881a      	ldrh	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	1c9a      	adds	r2, r3, #2
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d119      	bne.n	8002c2c <HAL_SPI_TransmitReceive+0x1b8>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d014      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	b292      	uxth	r2, r2
 8002c0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	1c9a      	adds	r2, r3, #2
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c2c:	f7fe fd22 	bl	8001674 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d807      	bhi.n	8002c4c <HAL_SPI_TransmitReceive+0x1d8>
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c42:	d003      	beq.n	8002c4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c4a:	e0a7      	b.n	8002d9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1a6      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x130>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1a1      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x130>
 8002c60:	e07c      	b.n	8002d5c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x1fc>
 8002c6a:	8b7b      	ldrh	r3, [r7, #26]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d16b      	bne.n	8002d48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	330c      	adds	r3, #12
 8002c7a:	7812      	ldrb	r2, [r2, #0]
 8002c7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c96:	e057      	b.n	8002d48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d11c      	bne.n	8002ce0 <HAL_SPI_TransmitReceive+0x26c>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d017      	beq.n	8002ce0 <HAL_SPI_TransmitReceive+0x26c>
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d114      	bne.n	8002ce0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	7812      	ldrb	r2, [r2, #0]
 8002cc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d119      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x2ae>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d014      	beq.n	8002d22 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d22:	f7fe fca7 	bl	8001674 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d803      	bhi.n	8002d3a <HAL_SPI_TransmitReceive+0x2c6>
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	d102      	bne.n	8002d40 <HAL_SPI_TransmitReceive+0x2cc>
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d46:	e029      	b.n	8002d9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1a2      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x224>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d19d      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f917 	bl	8002f94 <SPI_EndRxTxTransaction>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d78:	e010      	b.n	8002d9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10b      	bne.n	8002d9a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	e000      	b.n	8002d9c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3730      	adds	r7, #48	; 0x30
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dc8:	f7fe fc54 	bl	8001674 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dd8:	f7fe fc4c 	bl	8001674 <HAL_GetTick>
 8002ddc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	015b      	lsls	r3, r3, #5
 8002de4:	0d1b      	lsrs	r3, r3, #20
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dee:	e054      	b.n	8002e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df6:	d050      	beq.n	8002e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002df8:	f7fe fc3c 	bl	8001674 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d902      	bls.n	8002e0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d13d      	bne.n	8002e8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e26:	d111      	bne.n	8002e4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e30:	d004      	beq.n	8002e3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3a:	d107      	bne.n	8002e4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e54:	d10f      	bne.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e017      	b.n	8002eba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	bf0c      	ite	eq
 8002eaa:	2301      	moveq	r3, #1
 8002eac:	2300      	movne	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d19b      	bne.n	8002df0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000000 	.word	0x20000000

08002ec8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002edc:	d111      	bne.n	8002f02 <SPI_EndRxTransaction+0x3a>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee6:	d004      	beq.n	8002ef2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef0:	d107      	bne.n	8002f02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f00:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f0a:	d12a      	bne.n	8002f62 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f14:	d012      	beq.n	8002f3c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7ff ff49 	bl	8002db8 <SPI_WaitFlagStateUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d02d      	beq.n	8002f88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	f043 0220 	orr.w	r2, r3, #32
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e026      	b.n	8002f8a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	2101      	movs	r1, #1
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f7ff ff36 	bl	8002db8 <SPI_WaitFlagStateUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01a      	beq.n	8002f88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f043 0220 	orr.w	r2, r3, #32
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e013      	b.n	8002f8a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7ff ff23 	bl	8002db8 <SPI_WaitFlagStateUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7c:	f043 0220 	orr.w	r2, r3, #32
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e000      	b.n	8002f8a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <SPI_EndRxTxTransaction+0x7c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <SPI_EndRxTxTransaction+0x80>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0d5b      	lsrs	r3, r3, #21
 8002fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fb0:	fb02 f303 	mul.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fbe:	d112      	bne.n	8002fe6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2180      	movs	r1, #128	; 0x80
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f7ff fef4 	bl	8002db8 <SPI_WaitFlagStateUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	f043 0220 	orr.w	r2, r3, #32
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e00f      	b.n	8003006 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d0f2      	beq.n	8002fe6 <SPI_EndRxTxTransaction+0x52>
 8003000:	e000      	b.n	8003004 <SPI_EndRxTxTransaction+0x70>
        break;
 8003002:	bf00      	nop
  }

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000000 	.word	0x20000000
 8003014:	165e9f81 	.word	0x165e9f81

08003018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e041      	b.n	80030ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fe f9d6 	bl	80013f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 fc5e 	bl	8003918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d001      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e044      	b.n	800315a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <HAL_TIM_Base_Start_IT+0xb0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d018      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x6c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fa:	d013      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x6c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1a      	ldr	r2, [pc, #104]	; (800316c <HAL_TIM_Base_Start_IT+0xb4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00e      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x6c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_TIM_Base_Start_IT+0xb8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d009      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x6c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a17      	ldr	r2, [pc, #92]	; (8003174 <HAL_TIM_Base_Start_IT+0xbc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x6c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a16      	ldr	r2, [pc, #88]	; (8003178 <HAL_TIM_Base_Start_IT+0xc0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d111      	bne.n	8003148 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b06      	cmp	r3, #6
 8003134:	d010      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003146:	e007      	b.n	8003158 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000
 800316c:	40000400 	.word	0x40000400
 8003170:	40000800 	.word	0x40000800
 8003174:	40000c00 	.word	0x40000c00
 8003178:	40014000 	.word	0x40014000

0800317c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e041      	b.n	8003212 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f839 	bl	800321a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f000 fbac 	bl	8003918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <HAL_TIM_PWM_Start+0x24>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e022      	b.n	800329a <HAL_TIM_PWM_Start+0x6a>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b04      	cmp	r3, #4
 8003258:	d109      	bne.n	800326e <HAL_TIM_PWM_Start+0x3e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	bf14      	ite	ne
 8003266:	2301      	movne	r3, #1
 8003268:	2300      	moveq	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	e015      	b.n	800329a <HAL_TIM_PWM_Start+0x6a>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b08      	cmp	r3, #8
 8003272:	d109      	bne.n	8003288 <HAL_TIM_PWM_Start+0x58>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e008      	b.n	800329a <HAL_TIM_PWM_Start+0x6a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e068      	b.n	8003374 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <HAL_TIM_PWM_Start+0x82>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b0:	e013      	b.n	80032da <HAL_TIM_PWM_Start+0xaa>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d104      	bne.n	80032c2 <HAL_TIM_PWM_Start+0x92>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c0:	e00b      	b.n	80032da <HAL_TIM_PWM_Start+0xaa>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d104      	bne.n	80032d2 <HAL_TIM_PWM_Start+0xa2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d0:	e003      	b.n	80032da <HAL_TIM_PWM_Start+0xaa>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2201      	movs	r2, #1
 80032e0:	6839      	ldr	r1, [r7, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fdbe 	bl	8003e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a23      	ldr	r2, [pc, #140]	; (800337c <HAL_TIM_PWM_Start+0x14c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d107      	bne.n	8003302 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_TIM_PWM_Start+0x14c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d018      	beq.n	800333e <HAL_TIM_PWM_Start+0x10e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003314:	d013      	beq.n	800333e <HAL_TIM_PWM_Start+0x10e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a19      	ldr	r2, [pc, #100]	; (8003380 <HAL_TIM_PWM_Start+0x150>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00e      	beq.n	800333e <HAL_TIM_PWM_Start+0x10e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a17      	ldr	r2, [pc, #92]	; (8003384 <HAL_TIM_PWM_Start+0x154>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_TIM_PWM_Start+0x10e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a16      	ldr	r2, [pc, #88]	; (8003388 <HAL_TIM_PWM_Start+0x158>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_TIM_PWM_Start+0x10e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a14      	ldr	r2, [pc, #80]	; (800338c <HAL_TIM_PWM_Start+0x15c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d111      	bne.n	8003362 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d010      	beq.n	8003372 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003360:	e007      	b.n	8003372 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40010000 	.word	0x40010000
 8003380:	40000400 	.word	0x40000400
 8003384:	40000800 	.word	0x40000800
 8003388:	40000c00 	.word	0x40000c00
 800338c:	40014000 	.word	0x40014000

08003390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d122      	bne.n	80033ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d11b      	bne.n	80033ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0202 	mvn.w	r2, #2
 80033bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fa81 	bl	80038da <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fa73 	bl	80038c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fa84 	bl	80038ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b04      	cmp	r3, #4
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0204 	mvn.w	r2, #4
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fa57 	bl	80038da <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fa49 	bl	80038c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fa5a 	bl	80038ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b08      	cmp	r3, #8
 800344c:	d122      	bne.n	8003494 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b08      	cmp	r3, #8
 800345a:	d11b      	bne.n	8003494 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0208 	mvn.w	r2, #8
 8003464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2204      	movs	r2, #4
 800346a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fa2d 	bl	80038da <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fa1f 	bl	80038c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fa30 	bl	80038ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b10      	cmp	r3, #16
 80034a0:	d122      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d11b      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0210 	mvn.w	r2, #16
 80034b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2208      	movs	r2, #8
 80034be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa03 	bl	80038da <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f9f5 	bl	80038c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fa06 	bl	80038ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d10e      	bne.n	8003514 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0201 	mvn.w	r2, #1
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f9cf 	bl	80038b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b80      	cmp	r3, #128	; 0x80
 8003520:	d10e      	bne.n	8003540 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352c:	2b80      	cmp	r3, #128	; 0x80
 800352e:	d107      	bne.n	8003540 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fd30 	bl	8003fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d10e      	bne.n	800356c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d107      	bne.n	800356c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f9cb 	bl	8003902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b20      	cmp	r3, #32
 8003578:	d10e      	bne.n	8003598 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b20      	cmp	r3, #32
 8003586:	d107      	bne.n	8003598 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0220 	mvn.w	r2, #32
 8003590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fcfa 	bl	8003f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e0ae      	b.n	800371c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	f200 809f 	bhi.w	800370c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035ce:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	08003609 	.word	0x08003609
 80035d8:	0800370d 	.word	0x0800370d
 80035dc:	0800370d 	.word	0x0800370d
 80035e0:	0800370d 	.word	0x0800370d
 80035e4:	08003649 	.word	0x08003649
 80035e8:	0800370d 	.word	0x0800370d
 80035ec:	0800370d 	.word	0x0800370d
 80035f0:	0800370d 	.word	0x0800370d
 80035f4:	0800368b 	.word	0x0800368b
 80035f8:	0800370d 	.word	0x0800370d
 80035fc:	0800370d 	.word	0x0800370d
 8003600:	0800370d 	.word	0x0800370d
 8003604:	080036cb 	.word	0x080036cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fa02 	bl	8003a18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0208 	orr.w	r2, r2, #8
 8003622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0204 	bic.w	r2, r2, #4
 8003632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6999      	ldr	r1, [r3, #24]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	619a      	str	r2, [r3, #24]
      break;
 8003646:	e064      	b.n	8003712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fa48 	bl	8003ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6999      	ldr	r1, [r3, #24]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	021a      	lsls	r2, r3, #8
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	619a      	str	r2, [r3, #24]
      break;
 8003688:	e043      	b.n	8003712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fa93 	bl	8003bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0208 	orr.w	r2, r2, #8
 80036a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0204 	bic.w	r2, r2, #4
 80036b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69d9      	ldr	r1, [r3, #28]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	61da      	str	r2, [r3, #28]
      break;
 80036c8:	e023      	b.n	8003712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fadd 	bl	8003c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69d9      	ldr	r1, [r3, #28]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	021a      	lsls	r2, r3, #8
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	61da      	str	r2, [r3, #28]
      break;
 800370a:	e002      	b.n	8003712 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	75fb      	strb	r3, [r7, #23]
      break;
 8003710:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800371a:	7dfb      	ldrb	r3, [r7, #23]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_TIM_ConfigClockSource+0x1c>
 800373c:	2302      	movs	r3, #2
 800373e:	e0b4      	b.n	80038aa <HAL_TIM_ConfigClockSource+0x186>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800375e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003778:	d03e      	beq.n	80037f8 <HAL_TIM_ConfigClockSource+0xd4>
 800377a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800377e:	f200 8087 	bhi.w	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 8003782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003786:	f000 8086 	beq.w	8003896 <HAL_TIM_ConfigClockSource+0x172>
 800378a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378e:	d87f      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 8003790:	2b70      	cmp	r3, #112	; 0x70
 8003792:	d01a      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0xa6>
 8003794:	2b70      	cmp	r3, #112	; 0x70
 8003796:	d87b      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 8003798:	2b60      	cmp	r3, #96	; 0x60
 800379a:	d050      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x11a>
 800379c:	2b60      	cmp	r3, #96	; 0x60
 800379e:	d877      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 80037a0:	2b50      	cmp	r3, #80	; 0x50
 80037a2:	d03c      	beq.n	800381e <HAL_TIM_ConfigClockSource+0xfa>
 80037a4:	2b50      	cmp	r3, #80	; 0x50
 80037a6:	d873      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d058      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x13a>
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d86f      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 80037b0:	2b30      	cmp	r3, #48	; 0x30
 80037b2:	d064      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x15a>
 80037b4:	2b30      	cmp	r3, #48	; 0x30
 80037b6:	d86b      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d060      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x15a>
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d867      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d05c      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x15a>
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d05a      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x15a>
 80037c8:	e062      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f000 fb23 	bl	8003e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	609a      	str	r2, [r3, #8]
      break;
 80037f6:	e04f      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6899      	ldr	r1, [r3, #8]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f000 fb0c 	bl	8003e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800381a:	609a      	str	r2, [r3, #8]
      break;
 800381c:	e03c      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	461a      	mov	r2, r3
 800382c:	f000 fa80 	bl	8003d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2150      	movs	r1, #80	; 0x50
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fad9 	bl	8003dee <TIM_ITRx_SetConfig>
      break;
 800383c:	e02c      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	461a      	mov	r2, r3
 800384c:	f000 fa9f 	bl	8003d8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2160      	movs	r1, #96	; 0x60
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fac9 	bl	8003dee <TIM_ITRx_SetConfig>
      break;
 800385c:	e01c      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	461a      	mov	r2, r3
 800386c:	f000 fa60 	bl	8003d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2140      	movs	r1, #64	; 0x40
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fab9 	bl	8003dee <TIM_ITRx_SetConfig>
      break;
 800387c:	e00c      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4619      	mov	r1, r3
 8003888:	4610      	mov	r0, r2
 800388a:	f000 fab0 	bl	8003dee <TIM_ITRx_SetConfig>
      break;
 800388e:	e003      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      break;
 8003894:	e000      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a34      	ldr	r2, [pc, #208]	; (80039fc <TIM_Base_SetConfig+0xe4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00f      	beq.n	8003950 <TIM_Base_SetConfig+0x38>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d00b      	beq.n	8003950 <TIM_Base_SetConfig+0x38>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a31      	ldr	r2, [pc, #196]	; (8003a00 <TIM_Base_SetConfig+0xe8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_Base_SetConfig+0x38>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a30      	ldr	r2, [pc, #192]	; (8003a04 <TIM_Base_SetConfig+0xec>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0x38>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a2f      	ldr	r2, [pc, #188]	; (8003a08 <TIM_Base_SetConfig+0xf0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a25      	ldr	r2, [pc, #148]	; (80039fc <TIM_Base_SetConfig+0xe4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01b      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003970:	d017      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <TIM_Base_SetConfig+0xe8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a21      	ldr	r2, [pc, #132]	; (8003a04 <TIM_Base_SetConfig+0xec>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00f      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <TIM_Base_SetConfig+0xf0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00b      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <TIM_Base_SetConfig+0xf4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d007      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <TIM_Base_SetConfig+0xf8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d003      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <TIM_Base_SetConfig+0xfc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d108      	bne.n	80039b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a08      	ldr	r2, [pc, #32]	; (80039fc <TIM_Base_SetConfig+0xe4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d103      	bne.n	80039e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	615a      	str	r2, [r3, #20]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	40014000 	.word	0x40014000
 8003a10:	40014400 	.word	0x40014400
 8003a14:	40014800 	.word	0x40014800

08003a18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f023 0201 	bic.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 0302 	bic.w	r3, r3, #2
 8003a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <TIM_OC1_SetConfig+0xc8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d10c      	bne.n	8003a8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f023 0308 	bic.w	r3, r3, #8
 8003a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f023 0304 	bic.w	r3, r3, #4
 8003a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <TIM_OC1_SetConfig+0xc8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d111      	bne.n	8003aba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	621a      	str	r2, [r3, #32]
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40010000 	.word	0x40010000

08003ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f023 0210 	bic.w	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f023 0320 	bic.w	r3, r3, #32
 8003b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <TIM_OC2_SetConfig+0xd4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10d      	bne.n	8003b60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <TIM_OC2_SetConfig+0xd4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d113      	bne.n	8003b90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40010000 	.word	0x40010000

08003bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <TIM_OC3_SetConfig+0xd0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d10d      	bne.n	8003c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a14      	ldr	r2, [pc, #80]	; (8003c8c <TIM_OC3_SetConfig+0xd0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d113      	bne.n	8003c66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40010000 	.word	0x40010000

08003c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	031b      	lsls	r3, r3, #12
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <TIM_OC4_SetConfig+0x9c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d109      	bne.n	8003d04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40010000 	.word	0x40010000

08003d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0201 	bic.w	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f023 030a 	bic.w	r3, r3, #10
 8003d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	621a      	str	r2, [r3, #32]
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b087      	sub	sp, #28
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f023 0210 	bic.w	r2, r3, #16
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	031b      	lsls	r3, r3, #12
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f043 0307 	orr.w	r3, r3, #7
 8003e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	609a      	str	r2, [r3, #8]
}
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	021a      	lsls	r2, r3, #8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	609a      	str	r2, [r3, #8]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2201      	movs	r2, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	401a      	ands	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a1a      	ldr	r2, [r3, #32]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e050      	b.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d018      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d013      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00e      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d009      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d004      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d10c      	bne.n	8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40014000 	.word	0x40014000

08003f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <__libc_init_array>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	4d0d      	ldr	r5, [pc, #52]	; (8003fec <__libc_init_array+0x38>)
 8003fb8:	4c0d      	ldr	r4, [pc, #52]	; (8003ff0 <__libc_init_array+0x3c>)
 8003fba:	1b64      	subs	r4, r4, r5
 8003fbc:	10a4      	asrs	r4, r4, #2
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	42a6      	cmp	r6, r4
 8003fc2:	d109      	bne.n	8003fd8 <__libc_init_array+0x24>
 8003fc4:	4d0b      	ldr	r5, [pc, #44]	; (8003ff4 <__libc_init_array+0x40>)
 8003fc6:	4c0c      	ldr	r4, [pc, #48]	; (8003ff8 <__libc_init_array+0x44>)
 8003fc8:	f000 f820 	bl	800400c <_init>
 8003fcc:	1b64      	subs	r4, r4, r5
 8003fce:	10a4      	asrs	r4, r4, #2
 8003fd0:	2600      	movs	r6, #0
 8003fd2:	42a6      	cmp	r6, r4
 8003fd4:	d105      	bne.n	8003fe2 <__libc_init_array+0x2e>
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
 8003fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fdc:	4798      	blx	r3
 8003fde:	3601      	adds	r6, #1
 8003fe0:	e7ee      	b.n	8003fc0 <__libc_init_array+0xc>
 8003fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe6:	4798      	blx	r3
 8003fe8:	3601      	adds	r6, #1
 8003fea:	e7f2      	b.n	8003fd2 <__libc_init_array+0x1e>
 8003fec:	0800403c 	.word	0x0800403c
 8003ff0:	0800403c 	.word	0x0800403c
 8003ff4:	0800403c 	.word	0x0800403c
 8003ff8:	08004040 	.word	0x08004040

08003ffc <memset>:
 8003ffc:	4402      	add	r2, r0
 8003ffe:	4603      	mov	r3, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <_init>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr

08004018 <_fini>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	bf00      	nop
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr
